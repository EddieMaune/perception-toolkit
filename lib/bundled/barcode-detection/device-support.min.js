this.Toolkit=this.Toolkit||{},this.Toolkit.deviceSupport=function(e){"use strict";const t="\n:host {\n  --baseline: 8px;\n  --background: #FFF;\n  --borderRadius: 4px;\n  --color: #333;\n  --fontFamily: 'Arial', 'Helvetica', sans-serif;\n  --padding: calc(var(--baseline) * 4)\n      calc(var(--baseline) * 4)\n      calc(var(--baseline) * 2)\n      calc(var(--baseline) * 3);\n\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: 80vw;\n  text-align: center;\n}\n\n#container {\n  padding: var(--padding);\n  border-radius: var(--borderRadius);\n  font-family: var(--fontFamily);\n  background: var(--background);\n  color: var(--color);\n}\n",n='<div id="container"></div>';class s extends HTMLElement{constructor(){super(),this.message=s.DEFAULT_MESSAGE,this.root=this.attachShadow({mode:"open"})}connectedCallback(){this.root.innerHTML=`<style>${t}</style> ${n}`,this.root.querySelector("#container").textContent=this.message}}s.defaultTagName="no-support-card",s.DEFAULT_MESSAGE="Sorry, this browser does not support the required features";class o{constructor(){this.useEvents=!1,this.detectors=new Map}addDetector(e){const{name:t,supported:n}=e;if(this.detectors.has(t))throw new Error(`${t} already added`);this.detectors.set(t,n)}removeDetector(e){this.detectors.delete(e)}async detect(){const e={};for(const[t,n]of this.detectors)e[t]=await n();return this.useEvents&&function(e,t=window,n){const s=new CustomEvent(e,{bubbles:!0,detail:n});t.dispatchEvent(s)}(o.supportsEvent,self,e),e}}o.supportsEvent="supports";const a={name:"getUserMedia",supported:async()=>"mediaDevices"in self.navigator&&"getUserMedia"in self.navigator.mediaDevices};return e.detectSupport=async function(){const e=new o;if(e.addDetector(a),!(await e.detect())[a.name]){customElements.define(s.defaultTagName,s);const e=new s;document.body.appendChild(e)}},e}({});